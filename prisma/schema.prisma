// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       UserRole
  contactNo  String
  address    String
  profileImg String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reviews Reviews[]
  orders  Order[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]

  @@map("categories")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  reviews      Reviews[]
  orderedBooks OrderedBook[]

  @@map("books")
}

model Reviews {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  @@map("reviews")
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderedBooks OrderedBook[]

  @@map("orders")
}

model OrderedBook {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  @@map("ordered_books")
}

enum UserRole {
  admin
  customer
}

enum OrderStatus {
  pending
  shipped
  delivered
}
